/*
 * 006spi_tx_testing.c
 */

#include "stm32f446xx.h"
#include "stm32f4xx_gpio_driver.h"
#include "stm32f4xx_spi_driver.h"
#include  <string.h>
/*
 *  PB12 --> SPI2_NSS
 *  PB13 --> SPI2_SCK
 *  PB14 --> SPI2_MISO
 *  PB15 --> SPI2_MOSI
 * Alternate Functionalty mode 5
 */



void SPI2_GPIOInits()
{

	GPIO_Handle_t SPIpins;

	SPIpins.pGPIOx = GPIOB;

	SPIpins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
	SPIpins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
	SPIpins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	SPIpins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
	SPIpins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;

	//SCK
	SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
	        GPIO_Init(&SPIpins);

	//MISO
	//SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14
		//	GPIO_Init(&SPIpins);

	//MOSI
	SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
	        GPIO_Init(&SPIpins);

   //NSS
   //SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
   //        GPIO_Init(&SPIpins);

}

void SPI2_Inits()
{

	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;

	SPI2Handle.SPIConfig.SPI_BusConfig  = SPI_BUS_CONFIG_FD;
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
	SPI2Handle.SPIConfig.SPI_SclkSpeed  = SPI_SCLK_SPEED_DIV2;  //Generates serial clock of 8 MHz
    SPI2Handle.SPIConfig.SPI_DFF        = SPI_DFF_8BITS;
	SPI2Handle.SPIConfig.SPI_CPHA       = SPI_CPHA_LOW;
	SPI2Handle.SPIConfig.SPI_CPOL       = SPI_CPOL_LOW;
	SPI2Handle.SPIConfig.SPI_SSM        = SPI_SSM_EN; //software slave management enable for NNS pin

	SPI_Init(&SPI2Handle);



}



int main()
{

	char user_data[] = "Hello World";

	//this function is used to initilize the GPIO pins to behave as SPI2 pin
      SPI2_GPIOInits();

    //this function is used to initilize the SPI peripheral parameters
      SPI2_Inits();

      //This makes NSS signal internaly high and avoids MODF error
      SPI_SSIConfig(SPI2,ENABLE);

      //enable the SPI peripheral before sending data
       SPI_PeripheralControl(SPI2,ENABLE);

      SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));

      //confirming if SPI is busy or not
       SPI_GetStatusFlag(SPI2, SPI_BSY_FLAG);

      //disable the SPI peripheral after sending  data
      SPI_PeripheralControl(SPI2,DISABLE);


      while(1);


	return 0;
}
